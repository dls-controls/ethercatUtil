#==============================================================================
# Ethercat GUI power supply module template
#
# Contains module-level PVs and GUI for the module.
#
# Macros
# % macro, name,     GUI object name
# % macro, P,        PV prefix
# % macro, R,        PV suffix
# % macro, POSITION, Module position
# % macro, TYPE,     Module type
# % macro, SUBTYPE,  Measurement subtype
# % macro, PORT,     Asyn port of slave module
# % macro, SCAN,     Scan period of state
# % macro, POWER_OK, Power OK entry name
# % macro, OVERLOAD, Overload entry name
#
# GUI
# % gui, $(name=), edmembed, ethercat_power_supply.edl, P=$(P), R=$(R)
# % gui, $(name=), boyembed, ethercatUtilApp_opi/ethercat_power_supply.opi, P=$(P), R=$(R)
#
#==============================================================================

record(longin, "$(P):$(R):POSITION")
{
    field(DESC, "Module position")
    field(VAL,  "$(POSITION)")
    field(PINI, "YES")
}

record(stringin, "$(P):$(R):MODULE_TYPE")
{
    field(DESC, "Module type")
    field(VAL,  "$(TYPE)")
    field(PINI, "YES")
}

record(mbbi, "$(P):$(R):STATE")
{
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT))AL_STATE")
  field(SCAN, "$(SCAN)")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "4")
  field(FRVL, "8")
  field(ONST, "INIT")
  field(TWST, "PREOP")
  field(THST, "SAFEOP")
  field(FRST, "OP")
}

record(stringout, "$(P):$(R):ALIAS")
{
    field(DESC, "Channel alias")
    field(VAL,  "")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(stringin, "$(P):$(R):TYPE")
{
    field(DESC, "Measurement type")
    field(VAL,  "Power supply")
    field(PINI, "YES")
}

record(stringin, "$(P):$(R):SUBTYPE")
{
    field(DESC, "Measurement subtype")
    field(VAL,  "$(SUBTYPE)")
    field(PINI, "YES")
}

record(bi, "$(P):$(R):POWER_OK")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT))$(POWER_OK)")
    field(SCAN, "$(SCAN)")
    field(ZNAM, "OFF")
    field(ONAM, "ON")
}

record(bi, "$(P):$(R):OVERLOAD")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT))$(OVERLOAD)")
    field(SCAN, "$(SCAN)")
    field(ZNAM, "OFF")
    field(ONAM, "ON")
}
